
\subsection { \label data_block_compression XISF Data Block Compression } {

   An \lref data_block {XISF data block} \e may be transformed with a compression codec or algorithm. Both lossless and lossy compression schemes are permitted. XML elements serializing the values of compressed XISF data blocks \e must include a \c compression XML attribute with the following syntax:

   \c { \hs compression="\e{codec}:\e{parameters}" }

   where \c\e codec is the name of a compression algorithm, and \c\e parameters is a set of algorithm-dependent parameters. The value of the \c compression attribute \e must be sufficient to recover meaningful data for the XISF data block being serialized. Note that we specify \e meaningful instead of \e {the original} because lossy compression algorithms are supported. The performance and ability of a compression algorithm to maximize compression ratios and minimize data degradation are beyond the scope of this specification.

   For \lref embedded_data_block {embedded XISF data blocks}, the \c compression attribute \e shall be an attribute of the \c Data child element serializing the block's contents, \e not of the element that serializes the block. For the rest of \lref data_block_location {block location modes}, the \c compression attribute \e shall be included in the element that serializes the block.

   \subsection { \label checksums_of_compressed_blocks Checksums of compressed blocks } {

      When a \lref data_block_checksum \c checksum attribute is included in the XML element serializing a compressed data block, an encoder \e shall compute the corresponding cryptoghraphic digest for the compressed data, and \e never from the original, uncompressed data. If a checksum verification fails for a compressed data block, a decoder \e must \e not attempt to decompress the altered data, as this might cause a vulnerability that could be exploited.
   }

   \subsection { Zlib compression } {

      The deflate compression algorithm\ref rfc_1951 and the standard zlib format\ref rfc_1950 are formally supported by this first XISF specification as the standard XISF compression codec. Future revisions of XISF will include more compression methods.

      In particular, the implementation written by Jean-Loup Gailly and Mark Adler, the well-known zlib library,\ref www_zlib is \e recommended by this specification.

      An XML element serializing the contents of an XISF data block compressed with the zlib format \e must have a \c compression attribute with the following syntax:

      \block[marginleft:2em] \c {
         compression="zlib:\e{uncompressed-size}"
      }

      where \c\e uncompressed-size is a plain text representation of an unsigned integer whose value is the size in bytes of the original uncompressed data.

      Example:

      \code[lang:xml] { #:
<Image geometry="6:6:3" sampleFormat="UInt8" colorSpace="RGB" location="embedded">
   <Data compression="zlib:108" encoding="base64">
      eJxjYGBg+A+GEPCfAYkJFQZSUPZ/KBtTBFMXOuc/AwCjKyPd
   </Data>
</Image>
      :# }

      This example serializes a tiny RGB color image of 6x6 pixels, compressed and embedded within an \lref image_core_element \c Image element. The following example:

      \code[lang:xml] { #:
<Property id="Test" type="ByteArray" length="34" compression="zlib:34" location="inline:base64">
   eNoLycgsVgCiRIWS1OISBV2FENfgECBlaGRsYmpmbmFpAACzWQkd
</Property>
      :# }

      shows a \lref property_core_element \c Property element serializing a \lref bytearray_property_type ByteArray XISF property with zlib compression as an \lref inline_data_block {inline data block}.

      This example shows a zlib-compressed image with a SHA-1 checksum:

      \code[lang:xml] { #:
<Image geometry="960:540:3" sampleFormat="Float32" bounds="0:1"
       colorSpace="RGB" compression="zlib:6220800" location="attachment:4570:1428362"
       checksum="sha1:1ad9a10249b7574f97c7b4771f13924603b9852d" />
      :# }
   }
}
